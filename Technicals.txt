It's not just AutoRun, USB malware is more than that.

One of the reasons that USB malware is hard to defeat and so widespread on
Windows systems is that Windows, originated from DOS, do not have proper enough
execution prevention mechanisms. Generally, user should be aware of that he is
_unintentionally_ running an _arbitrary_ program, when he opens a drive or a
file inside it.

Unix/Linux already have execution mode bits, and the (optional) 'noexec' mount
option. It's not perfect, but DOES prevent most of the tricks that USB malware
could do on Windows. There's no execute bit on Windows, so we have to let users
aware by other means.

There are several factors that a Windows user might mistakenly runs a program,
thinking he is opening a (legitimate) file:
- File extension displayed in Windows Explorer (_displayed_, which may be fake)
- File icon, whether it is static or dynamic based on file content (malicious
  file can have a icon faking the user that it's something safe)
- Shortcut arrows
- Whether file itself is loaded and executed directly by the OS, executed only
  via an interpreter, or have no execution data at all
(This list is not exhaustive.)

Technically these correspond to the following things:

1. "Hide extension for known file types" checkbox in Folder Settings, which
   corresponds to "HKCU\Software\Microsoft\Windows\CurrentVersion\Explorer\
   Advanced" value "HideFileExt" in registry
2. "NeverShowExt" or "AlwaysShowExt" registry value in class key (technically
   known as ProgID) of the file type ("NeverShowExt" takes precedence if both
   values exist)
3. The presence of "shellex\IconHandler" registry subkey of class key of the
   file type, and, if not present, the "DefaultIcon" subkey
4. "IsShortcut" registry value in class key of the file type
5. "HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Shell Icons" value
   "29" (if present this overrides the shortcut overlay arrow icon provided by
   shell32.dll)
6. Default value of "shell\open\command" subkey of class key of the file type,
   whether it begins with "%1", or ends with "%*", or both

Ideally on a secure system,

1. "HideFileExt" should be 0 (false).
2. No "NeverShowExt" value should be present for every file type, so that users
   can see every extension of every file type. ("AlwaysShowExt" would be
   optional if no extensions are hidden at all.)
3. The file icon may be dynamic only if there's no executable code in the file
   contents, and static otherwise. By "static" here I mean there's no Icon
   Handler, and the "DefaultIcon" is not "%1". That is, all files of the same
   type should display the same icon.
4. "IsShortcut" be present for all file types that represent links to another
   file, especially to file that may be executable.
5. The "Shell Icons" registry value "29" should either not exist or refer to an
   icon that is not blank icon.
6. Files that are not binary self-executable (PE, NE, MZ, or old COM format)
   shouldn't have "%1" in the beginning of their "shell\open\command", and
   files that are no executable code (script or binary) shouldn't have "%*" in
   end of "shell\open\command".

One exception can be made for scripts that contain shebangs indicating which
interpreter it is meant to be run in, and so will be necessary for OS kernel to
load it and parses the shebang. This is true for perl/python/shell scripts, but
not batch scripts. (And so having the default value of '"%1" %*' in "HKCR\
batfile\shell\open\command" is a bad idea. Should be 'cmd /c "%1" %*'. It might
remain as is for historical reasons. I don't know.)

Below is the list of some common file types and whether they fit the conditions
listed above. To ensure safety, at least 2 of the 6 cells should be "safe" for
every file type.

file | HideFileExt | NeverShow- |   Icon   | Shortcut |    %1     | %* ending
ext. | (safe:0,    | Ext (safe: | (safe:   |  arrow   | beginning | (safe:no)
     |  default:1) | absent)    |  static) |          | (safe:no) |
-----+-------------+------------+----------+----------+-----------+----------
.bat   user          (safe)       (safe)     no[1]      yes         yes
.cmd   user          (safe)       (safe)     no[1]      yes         yes

.com   user          (safe)       (safe)     no[1]      yes         yes
.exe   user          (safe)       "%1"       no[1]      yes         yes
.scr   user          (safe)       "%1"[2]    no[1]      yes         no[3]

.pif   n/a           present[4]   handler    yes(safe)  yes[4]      yes[4]
.lnk   n/a           present      handler    yes(safe)  n/a[5]      n/a[5]
.url   n/a           present      handler    yes(safe)  n/a[5]      n/a[5]
.WSH   user          (safe)       (safe)     yes(safe)  no(safe)    yes

.js    user          (safe)       (safe)     no[1]      no(safe)    yes
.JSE   user          (safe)       (safe)     no[1]      no(safe)    yes
.vbs   user          (safe)       (safe)     no[1]      no(safe)    yes
.VBE   user          (safe)       (safe)     no[1]      no(safe)    yes
.WSF   user          (safe)       (safe)     no[1]      no(safe)    yes

.msc   user          (safe)       handler    no[1]      no(safe)    yes

[1] Not a shortcut, however as it is executable code, it may contain code that
    executes other programs.
[2] There is no DefaultIcon subkey in HKCR\scrfile, but "%1" is implied for
    this file type.
[3] .scr is self-executable (PE format), so %* technically doesn't matter.
    Therefore no "safe" is marked on this field.
[4] Although .pif is a shortcut format, it's "open" verb, as handled by Windows
    Explorer, does not check for a valid PIF format. Thus it is possible to
    have a PE executable in .pif extension and get executed when user "opens"
    it in Explorer. (For this reason 'usb_vaccine.cmd' proposes to remove
    NeverShowExt value for this file type.)
[5] .lnk and .url have special Context Menu Handlers that change the default
    (open) verb.

-------------------------------------------------------------------------------

File types with "%1" default value of their "DefaultIcon" subkey:

Extension  Software       Class registry key (technically known as ProgID)
.ani                      HKCR\anifile
.cdf       IE4-IE6        HKCR\ChannelFile
(CLSID)    IE4-IE6        HKCR\ChannelShortcut
.cur                      HKCR\curfile
.exe                      HKCR\exefile
.ht        WinXP-         HKCR\htfile ("HyperTerminal File")
.ico                      HKCR\icofile
.msc       Win2000+ (NT)  HKCR\MSCFile
.otf       Win2000-Vista  HKCR\otffile
.ttc       Win2000-Vista  HKCR\ttcfile
.ttf       Win2000-Vista  HKCR\ttffile

Win95 only  HKCR\CLSID\{00028B05-0000-0000-C000-000000000046}
                ("Shortcut to The Microsoft Network")

In Windows 2000, XP or Vista, the font file types ('.otf', '.ttc', '.ttf',
except '.fon') have "%1" in default value of their respective "DefaultIcon"
subkey. Font files can never contain an icon, so it is fontext.dll that
provides the icon for those fonts (depending on format, e.g. TrueType or
"OpenType with TrueType outlines", both having '.ttf' file extension).

-------------------------------------------------------------------------------

File types that contain "IsShortcut" and "NeverShowExt" registry values:
Extension   Software      Class registry key (ProgID)
.appref-ms  .NET2.0+      HKCR\Application.Reference
.cnf        WinXP-        HKCR\ConferenceLink (NetMeeting "SpeedDial")
.shb        WinXP-        HKCR\DocShortcut ("Shortcut into a document")
.url        IE            HKCR\InternetShortcut
(unused)    WinVista+     HKCR\IE.AssocFile.URL
(unused)    IE9+          HKCR\IE.AssocFile.WEBSITE
.website    IE9+          HKCR\Microsoft.Website ("Pinned Site Shortcut")
.lnk                      HKCR\lnkfile
.pif                      HKCR\piffile
.maw        Office2000+   HKCR\Access.Shortcut.DataAccessPage.1
.mag        Office2000+   HKCR\Access.Shortcut.Diagram.1
.maf        MSOffice95+   HKCR\Access.Shortcut.Form.1
.mau        OfficeXP+     HKCR\Access.Shortcut.Function.1
.mam        MSOffice95+   HKCR\Access.Shortcut.Macro.1
.mad        MSOffice95+   HKCR\Access.Shortcut.Module.1
.maq        MSOffice95+   HKCR\Access.Shortcut.Query.1
.mar        MSOffice95+   HKCR\Access.Shortcut.Report.1
.mas        Office2000+   HKCR\Access.Shortcut.StoredProcedure.1
.mat        MSOffice95+   HKCR\Access.Shortcut.Table.1
.mav        Office2000+   HKCR\Access.Shortcut.View.1
.glk        Office2007+   HKCR\GrooveLinkFile
.xnk        Office2003-   HKCR\xnkfile ("Exchange Shortcut", used in Outlook)

File types that contain "IsShortcut" registry value but not "NeverShowExt":
Extension   Software      Class registry key (ProgID)
.mcc        Win95 only    HKCR\Dialer10CallingCard
                              ("Shortcut to The Microsoft Network")
.ccr        MSChat        HKCR\ComicChatRoomShortcut
.ccr        MSChat2.5     HKCR\MicrosoftChatRoomShortcut
.WSH        IE5+          HKCR\WSHFile

(Note to developers: Do not add every shortcut introduced in third party
applications. There may be countless number of them. Only note those that
appear in Windows components or Microsoft Office.)

-------------------------------------------------------------------------------

File types and CLSIDs that contain "NeverShowExt" registry value but not
"IsShortcut":
Extension            Software   Class registry key (ProgID)
.accountpicture-ms   Win8+      HKCR\accountpicturefile
.appcontent-ms       Win8.1+    HKCR\ApplicationContent
.library-ms          Win7+      HKCR\LibraryFolder
.searchConnector-ms  Win7+      HKCR\SearchConnectorFolder
.search-ms           WinVista+  HKCR\SearchFolder ("Saved Search")
.settingcontent-ms   Win8.1+    HKCR\SettingContent
.scf                 IE4+       HKCR\SHCmdFile ("Windows Explorer Command")
.shs                 WinXP-     HKCR\ShellScrap ("Scrap object")

Win98 only  HKCR\CLSID\{450D8FBA-AD25-11D0-98A8-0800361B1103} ("My Documents")
WinME+      HKCR\CLSID\{888DCA60-FC0A-11CF-8F0F-00C04FD7D062}
                ("Compressed (zipped) Folder SendTo Target")
            HKCR\CLSID\{9E56BE60-C50F-11CF-9A2C-00A0C90A90CE} ("Mail Service")
IE4+        HKCR\CLSID\{9E56BE61-C50F-11CF-9A2C-00A0C90A90CE}
                ("Desktop Shortcut")
Win2000+    HKCR\CLSID\{ECF03A32-103D-11d2-854D-006008059367}
                ("MyDocs Drop Target")

-------------------------------------------------------------------------------

File types that are self-executable (i.e. their "shell\open\command" default
value begins with "%1"):
    batfile, cmdfile, comfile, exefile, piffile, scrfile

For these extensions, the "NeverShowExt" value in their class key should never
be created. It is possible to have a PE executable in one of these extensions
(even .pif!)

-------------------------------------------------------------------------------

File types that contain "%*" in their "shell\open\command" default value:
Extension  Software       Class registry key (ProgID)
.bat                      HKCR\batfile
.cmd       WinNT4+        HKCR\cmdfile
.com                      HKCR\comfile
.exe                      HKCR\exefile
.hta       IE5+           HKCR\htafile
(unused)   IE9+           HKCR\IE.AssocFile.WEBSITE
(multi)    MSIME2010+     HKCR\IMEDictionaryCompiler
.JSE       IE5.01+        HKCR\JSEFile
.js        IE5+           HKCR\JSFile
.msu       WinVista+      HKCR\Microsoft.System.Update.1 (See note below)
.website   IE9+           HKCR\Microsoft.Website ("Pinned Site Shortcut")
.msc       Win2000+ (NT)  HKCR\MSCFile
.msi       Win2000+       HKCR\Msi.Package
.msp       Win2000+       HKCR\Msi.Patch
.pif                      HKCR\piffile
.VBE       IE5.01+        HKCR\VBEFile
.vbs       IE5+           HKCR\VBSFile
.xaml      .NET3.0+       HKCR\Windows.XamlDocument
.xbap      .NET3.0+       HKCR\Windows.Xbap
(multi)    Win7+          HKCR\Windows.XPSReachViewer
.WSF       IE5.01+        HKCR\WSFFile
.WSH       IE5+           HKCR\WSHFile
(multi)    .NET3.0+       HKCR\XPSViewer.Document.1

IMEDictionaryCompiler is associated with 2 file extensions: .dctx .dctxc
XPSViewer.Document.1 is associated with 3 file extensions: .dwfx .jtx .xps
Windows.XPSReachViewer is associated with 6 file extensions (7 extensions in
Windows 8 or later): .dwfx .jtx .xps .easmx .edrwx .eprtx (.oxps)

The Microsoft.System.Update.1 is special that it doesn't use "%*" for passing
multiple arguments. Instead in its "shell\open\command" default value it uses
"\"%1\" %2 %3 %4" (Vista). Windows 7 or later extends the command line to %9.

.cpl (HKCR\cplfile) contains "%*" in its "shell\cplopen\command" default value.

-------------------------------------------------------------------------------

The 'ASSOC' command in Windows NT is simply a registry program reading and
writing default value of "HKLM\SOFTWARE\Classes\<key>", ignoring the
equivalent key in HKCU. There is an unintentional feature: "ASSOC exefile"
works, and shows the name of the file type or ProgID in question.

Similarly, 'FTYPE' command reads and writes the "shell\open\command" subkey for
a given file type. It ignores the default value of "shell" subkey.

As Microsoft does not document the details of these commands, neither of them
are reliable across Windows versions. (Can't ensure they always read HKLM and
never HKCU.) We will just use "reg query" or "reg add" for accurate reading and
writing.

-------------------------------------------------------------------------------

Important notes about commands behaviors:
- MOVE command exits with 1 when a move error occurs. There's no way to specify
  "don't overwrite" option for MOVE command.
- DEL command exits with 1 only when arguments syntax or path is invalid. It's
  exit code does not distinguish between deletion success and failure.
- Both MOVE and DEL refuse to process files with Hidden or System (or both)
  attribute set. (They'll output the "could not find" error.) However since
  Windows NT, DEL supports '/A' option that can workaround this.
- 'attrib' utility without '/L' option follows symlinks when reading or
  changing attributes. '/L' is not available before Windows Vista.
- The %~a1 method will retrieve attributes of the link itself, if the file
  referenced by %1 is a link (junction or symlink).
- If "dirlink" is a directory link (attributes "DL"), "DEL dirlink" deletes all
  files in the target directory (DANGEROUS), while "RMDIR dirlink" (with or
  without '/S') removes the symlink without touching anything in the target
  directory (SAFE). MOVE command on links always processes links themselves
  rather than link targets.

-------------------------------------------------------------------------------

List of various shortcut types in Windows and their properties regarding
security.

The shortcut types that 'usb_vaccine.cmd' is currently concerned about are:
.pif, .lnk, .shb, .url, .appref-ms, and .glk

We don't try to fix every shortcut type, but only types that may bring
vulnerabilities to the user's system.

 Shortcut | Format |  May point to  | Custom | Show | Handles | Proper-
   type   |        |   executable   |  icon  | ext. | default |  ties
          |        |                |        |      |  verb   |  tab
----------+--------+----------------+--------+------+---------+--------
.pif        Binary   Yes              Yes[1]   Never  No[2]     Yes
.lnk        Binary   Yes              Yes      Never  Yes       Yes
.url        INI      Yes (file://)    Yes      Never  Yes       Yes
.website    INI      Not executed     Yes      Never  No        No
.glk        XML      Yes(file://)[3]  Yes      Never  No        No
.appref-ms  CSV+URL  Indirect[4]      Yes      Never  No        No
Folder      Direc-
  Shortcut    tory   Not executed     Yes      N/A    No        No
Symlink     Symlink  Yes              No[5]    N/A    N/A[5]    No
.mcc        ?        ? (Unknown)      Yes      User   No        Yes
.shb        Binary   Not executed[6]  No       Never  No        No
.WSH        INI      Not executed     No       User   No        Yes
.ma?        INI      Not executed     No       Never  No        No
.cnf        INI      No               No       Never  No        No
.xnk        Binary   ? (Unknown)      No       Never  No        No
.ccr        Binary   No               No       User   No        No
(This list is in no particular order.)

Fields meanings:
- May point to executable: Whether the shortcut format allows the target to be
  an executable file and whether it will be executed when user opens the
  shortcut. "Not executed" means the file format allows pointing to executable,
  but the handler program will filter out the file type of the target and so
  it's not executed.
- Custom icon: Whether the file type is associated with a custom IconHandler.
- Show ext.: Whether the file extension will be shown for the file type.
  "Never" means a "NeverShowExt" value is present for the type. "User" means
  the extension is shown according to user's "HideFileExt" setting. "N/A" means
  technically the shortcut type can have any or no extension.
- Handles default verb: "Yes" means the type is associated with a
  ContextMenuHandler which may change the default (open) verb for the file. In
  other words, the "shell\open\command" subkey is not reliable to determine the
  default action for that type.
  (<https://msdn.microsoft.com/en-us/library/windows/desktop/ee453696(v=vs.85).aspx>)
- Properties tab: Whether the file type is assigned a custom tab in the
  Properties window.

Notes:
[1] Custom icon for .pif is no longer shown in Windows Vista or later.
    (Reported by some users on the Internet. I couldn't find an official
    document noting this change. This is nothing to do with MS10-046 lnk file
    vulnerability.)
[2] The default "open" verb for .pif is handled by the Explorer shell.
[3] Office Groove 2007 launches the URL directly when user opens the shortcut.
    SharePoint Workspace 2010 instead pops up a warning before launching.
    However it's a bad idea to allow pointing to .exe in the first place.
[4] .appref-ms may point to remote application only (to a .manifest file).
    However it may still trick users into opening and downloading the app.
[5] Currently the Explorer shell displays generic file icons for symlinks
    pointing to files, and pops up an "Open with" menu for symlink's default
    "open" verb (ignoring symlinks' file extensions).
[6] It's possible to have a .shs file renamed to .shb. (The Shell Scrap handler
    doesn't check whether the file extension matches the format.) .shs files
    allow embedding executable code (as OLE objects).

-------------------------------------------------------------------------------

Technical details about folders' "Web View", Desktop.ini and Folder.htt.

The "Web View" of the folders, Desktop.ini and Folder.htt things are all
introduced in Windows Desktop Update, which was a feature of IE4. Windows
Desktop Update was optional for Windows 95 and NT4, but is a mandatory feature
in Windows 98 or later.

The program of the "Customize This Folder Wizard" was "ieshwiz.exe" located in
"%WinDir%\SYSTEM" (for 95, 98 or Me) or "%WinDir%\System32" (for NT4 or 2000).

In 95, NT4 or 98, when user chooses to "Create or edit an HTML document",
ieshwiz.exe copys the "%webdir%\folder.htt" file to the folder to be
customized, and shows an edit screen (Notepad) of the new Folder.htt to user.

(The %webdir% refers to "C:\Windows\Web" directory, if it's not explicitly
configured otherwise. The variable does appear in registry entries.)

Windows 2000 and Me included an updated version of ieshwiz.exe that allows user
to choose one of four templates, and optionally edit it:
- Standard              ("standard.htt")
- Classic (icons only)  ("classic.htt")
- Simple                ("starter.htt")
- Image Preview         ("ImgView.htt")

If user selects ImgView.htt and doesn't select "I want to edit this template"
checkbox, ieshwiz.exe will not copy the template. Otherwise, it copies the
selected template to a new subfolder named "Folder Settings" (with Hidden and
System attributes) inside the folder to be customized (hence, "Folder Settings\
Folder.htt").

Note that standard.htt in the choice above is not the same as folder.htt.
"folder.htt" in Windows 2000 or Me was used only for uncustomized folders.

Windows XP supported Web View before SP1, but no longer included ieshwiz.exe
and .htt file was not used unless in special places (such as Desktop).
The left "Tasks" pane (note: there's no official name for this) in Windows XP
is not implemented as a .htt file. The pane is not used when a folder has a
customized Web View (either done in previous Windows version or coded by hand).
The "Customize This Folder" in Windows XP or later is a property tab instead.
(Details are documented here: <https://support.microsoft.com/kb/812003>)

Windows 2000 SP3 and later, and XP SP1 and later have Web View disabled by
default (<https://support.microsoft.com/kb/819028>). However Desktop.ini may
still be used there to specify a custom icon or background for a folder.

(Note: Folder icon specified in Desktop.ini never works for root folders.
Windows determines drive icons based on the autorun.inf file, or, if it's not
present, the "DriveIcons" key in the local system's registry.)

The "Web View" thing has many names in the "Folder Options" throughout Windows
versions:
95, NT4 or 98: "as Web Page" (in View menu) and "View Web content in folders";
2000 or Me: "Web View" group box -> "Enable Web content in folders";
XP: "Tasks" group box -> "Show common tasks in folders" (which also enables Web
    View).
Microsoft documentation refers to this feature as "Web view".

An unofficial documentation of Desktop.ini can be found here:
<http://hwiegman.home.xs4all.nl/desktopini.html>

The minimum content in Desktop.ini to enable a custom Web View template was:

  [ExtShellFolderViews]
  ; (Optional:) Default={5984FFE0-28D4-11CF-AE66-08002B2E1262}
  {5984FFE0-28D4-11CF-AE66-08002B2E1262}={5984FFE0-28D4-11CF-AE66-08002B2E1262}
  ; (Optional:)
  ; {8BEBB290-52D0-11d0-B7F4-00C04FD706EC}={8BEBB290-52D0-11d0-B7F4-00C04FD706EC}
  [{5984FFE0-28D4-11CF-AE66-08002B2E1262}]
  PersistMoniker=file://Folder.htt
  ; (Or:) PersistMoniker=file://Folder Settings\Folder.htt
  ; (Or:) WebViewTemplate.NT5=<Path to .htt file ("file://" is optional)>
  ; (Optional:) PersistMonikerPreview=<Path to .bmp file (without "file://")>
  [.ShellClassInfo]
  ; (Not technically necessary but ieshwiz.exe adds it anyway:)
  ConfirmFileOp=0

The "Default" value in [ExtShellFolderViews] section specified the default view
of the folder. It was usually omitted and specifying "Default={5984FFE0..." was
redundant. However it may be specified as
"Default={8BEBB290-52D0-11d0-B7F4-00C04FD706EC}", which forced Thumbnails view
by default. (Example: "My Pictures" folder in Windows 2000 or Me)

The "WebViewTemplate.NT5" value was meant only for "ImgView.htt" or a similar
template, as Thumbnails view was only available in Windows 2000 or Me.

Below were some important registry entries of default folder templates.

  ; This key existed before Windows Vista. (Active Desktop)
  [HKEY_CLASSES_ROOT\CLSID\{00021400-0000-0000-C000-000000000046}\shellex\ExtShellFolderViews\{5984FFE0-28D4-11CF-AE66-08002B2E1262}]
  ; Data is REG_EXPAND_SZ of
  ; "file://%userappdata%\\Microsoft\\Internet Explorer\\Desktop.htt"
  ; (Shown in ASCII encoding here. Windows 2000 and XP required it to be
  ; encoded in UTF-16LE.)
  "PersistMoniker"=hex(2):66,69,6c,65,3a,2f,2f,25,75,73,65,72,61,70,70,64,61,\
    74,61,25,5c,4d,69,63,72,6f,73,6f,66,74,5c,49,6e,74,65,72,6e,65,74,20,45,\
    78,70,6c,6f,72,65,72,5c,44,65,73,6b,74,6f,70,2e,68,74,74,00

  ; This key existed in Windows 98, 2000 or Me. (IE4 upgrade for 95 and NT4
  ; did not come with default.htt.)
  [HKEY_CLASSES_ROOT\Folder\shellex\ExtShellFolderViews\{5984FFE0-28D4-11CF-AE66-08002B2E1262}]
  "PersistMoniker"="file://%webdir%\\default.htt"

  ; This key existed before Windows XP.
  [HKEY_CLASSES_ROOT\Directory\shellex\ExtShellFolderViews\{5984FFE0-28D4-11CF-AE66-08002B2E1262}]
  "PersistMoniker"="file://%webdir%\\folder.htt"

  ; This key existed only in Windows 2000 or Me. It enabled Thumbnails view
  ; for the folder.
  [HKEY_CLASSES_ROOT\Directory\shellex\ExtShellFolderViews\{8BEBB290-52D0-11d0-B7F4-00C04FD706EC}]
  "Attributes"=dword:60000000
  ; Data is REG_EXPAND_SZ of "{8BEBB290-52D0-11d0-B7F4-00C04FD706EC}"
  ; (Shown in ASCII encoding here.)
  "ISV"=hex(2):7b,38,42,45,42,42,32,39,30,2d,35,32,44,30,2d,31,31,64,30,2d,42,\
    37,46,34,2d,30,30,43,30,34,46,44,37,30,36,45,43,7d,00

  ; This key existed only in Windows Me. It was for root folder of the system
  ; drive. This template hides all files from view and displays a
  ; "View the entire contents of this drive" link on the left pane.
  [HKEY_CLASSES_ROOT\SysRootFolder\shellex\ExtShellFolderViews\{5984FFE0-28D4-11CF-AE66-08002B2E1262}]
  "PersistMoniker"="file://%webdir%\\sysroot.htt"

The "default.htt" and "folder.htt" in %webdir% were not identical templates.
"folder.htt" was used for regular directories (note the confusing wording of
"folder" and "directory" in registry entries above), while "default.htt" was
used for special folders such as:
- Dial-Up Networking
- My Briefcase
- Temporary Internet Files
- Downloaded Program Files
- History
- Subscriptions
Read the source code of default.htt for details of when it was used.

The root folder of Windows Me system drive did NOT contain Desktop.ini, yet the
folder was displayed with the custom "Web View" template "sysroot.htt". I'm not
sure how this behavior was implemented yet. "Customize This Folder" was still
allowed for root folders of non-system drives in Windows Me.

It is generally still unwise today to delete Desktop.ini files you found in
every directory. Many system directories still use Desktop.ini to denote their
special status (with a "CLSID" value). Some examples include: "Recycle Bin",
"Fonts" and "History".
