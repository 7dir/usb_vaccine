Compatibility with Windows NT 4.0

Windows NT 4 does support IniFileMapping registry key. So the AutoRun
IniFileMapping hack can work there.

However, several limitations of batch scripting in Windows NT 4 Command
Processor makes it difficult to write scripts compatible with that platform
while making the script secure as well.

So, 'usb_vaccine.cmd' is coded to only work with Windows 2000 or later.
(With Windows 2000 you need reg.exe from Support Tools. Unlike in XP it's not
available pre-installed.)

Here are limitations known in Windows NT 4 Command Processor environment:
- reg.exe v1.0 (in Win NT 4) has a different syntax than later versions. It's
  "reg query KeyName\ValueName" rather than "reg query KeyName /v ValueName".
  The latter syntax can distinguish between a subkey and value of the same name
  (which is possible in Win NT 4 registry).
  (<http://www.robvanderwoude.com/ntregquery.php>)
- "SETLOCAL EnableDelayedExpansion" does not work, which is required for secure
  "SET /P" (or "FOR /F") user input processing. Expansion syntax like "%VAR%"
  is vulnerable to command injection.
  (<http://www.robvanderwoude.com/local.php>)
  (<http://www.robvanderwoude.com/battech_inputvalidation_setp.php>)
- "SET /P" does not work, and choice.exe is available only in Resource Kit, and
  so there's no way to write interactive scripts.
  (<http://www.robvanderwoude.com/ntset.php>)
- Negative number in substring expansion (like "%VAR:~0,-5%") does not work.
- "%~1" does not work.
  (<http://www.robvanderwoude.com/ntcall.php>)
- "EXIT /B" does not work, which is required for return codes in subroutines.
  (<http://www.robvanderwoude.com/exit.php>)
- 'FOR /F "usebackq"' does not work.
  (<http://www.robvanderwoude.com/ntfor.php>)
- No dynamic variable %CMDEXTVERSION%. (For checking Win NT 4 environment you
  should use "IF CMDEXTVERSION 1" and not "IF %CMDEXTVERSION% GEQ 1".)

'usb_vaccine.cmd' contains code that checks whether the Command Processors
environment is okay. The code is copied below, with comments added:

    @ECHO OFF
    REM The CMDEXTVERSION check may be available only after cmd extensions are
    REM enabled. Expect a "Bad command" error for COMMAND.COM in DOS and Win9x.
    REM Redirecting stderr ("2>") is impossible in DOS and Win9x.
    SETLOCAL EnableExtensions
    REM Expect a "syntax error" for those not supporting. Win9x continues after
    REM error; Win NT 3.* and OS/2 will halt here.
    IF CMDEXTVERSION 2 GOTO cmd_ext_ok
    ENDLOCAL
    REM Error message. No ">&2" redirection because DOS COMMAND.COM doesn't
    REM recognize it and will instead write to a file named "&2".
    echo Requires Windows 2000 or later.
    REM The EXIT command doesn't always terminate batch execution - it does
    REM nothing when the batch is run on the topmost shell (in real DOS), or
    REM it kills the current layer of the shell (command interpreter).
    REM It is more reliable to GOTO an end label, but we keep the EXIT command
    REM as a fallback. Cygwin and MSYS Bash expect a lowercase 'exit' while in
    REM DOS command shells the letter case doesn't matter.
    GOTO EOF
    exit
    :cmd_ext_ok
    ENDLOCAL
    ... main code here ...
    :EOF

Note also for ReactOS and Wine:
ReactOS supports %CMDEXTVERSION% variable (=2) in v0.2.7 (SVN commit #16495).
ReactOS supports "IF /I" and "IF CMDEXTVERSION" checks in v0.3.8 (SVN commit
#38280).
Wine does not yet support %CMDEXTVERSION% or "IF CMDEXTVERSION" as of June
2015. (See <https://bugs.winehq.org/show_bug.cgi?id=32680>)
